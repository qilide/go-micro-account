// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/account/account.proto

package account

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Account service

func NewAccountEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// client API for Account service

type AccountService interface {
	//登录
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	//注册
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	//查询用户信息
	GetUserInfo(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*UserInfoResponse, error)
	//修改信息
	UpdateUserInfo(ctx context.Context, in *UserInfoRequest, opts ...client.CallOption) (*Response, error)
	//发送注册邮件
	SendRegisterMail(ctx context.Context, in *SendMailRequest, opts ...client.CallOption) (*SendMailResponse, error)
	//发送重置密码邮件
	SendResetPwdMail(ctx context.Context, in *SendMailRequest, opts ...client.CallOption) (*SendMailResponse, error)
	//重置密码
	ResetPwd(ctx context.Context, in *ResetPwdRequest, opts ...client.CallOption) (*Response, error)
	//获取权限
	GetUserPermission(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*GetPermissionResponse, error)
	//修改权限
	UpdateUserPermission(ctx context.Context, in *UpdatePermissionRequest, opts ...client.CallOption) (*Response, error)
	//退出账号
	Logout(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*Response, error)
	//删除账号
	DelUser(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*Response, error)
	//禁用账号
	DisableUser(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*Response, error)
	//启用账号
	EnableUser(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*Response, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Account.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "Account.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetUserInfo(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*UserInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Account.GetUserInfo", in)
	out := new(UserInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateUserInfo(ctx context.Context, in *UserInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Account.UpdateUserInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SendRegisterMail(ctx context.Context, in *SendMailRequest, opts ...client.CallOption) (*SendMailResponse, error) {
	req := c.c.NewRequest(c.name, "Account.SendRegisterMail", in)
	out := new(SendMailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SendResetPwdMail(ctx context.Context, in *SendMailRequest, opts ...client.CallOption) (*SendMailResponse, error) {
	req := c.c.NewRequest(c.name, "Account.SendResetPwdMail", in)
	out := new(SendMailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ResetPwd(ctx context.Context, in *ResetPwdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Account.ResetPwd", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetUserPermission(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*GetPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "Account.GetUserPermission", in)
	out := new(GetPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateUserPermission(ctx context.Context, in *UpdatePermissionRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Account.UpdateUserPermission", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Logout(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Account.Logout", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) DelUser(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Account.DelUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) DisableUser(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Account.DisableUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) EnableUser(ctx context.Context, in *UserIdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Account.EnableUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountHandler interface {
	//登录
	Login(context.Context, *LoginRequest, *LoginResponse) error
	//注册
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	//查询用户信息
	GetUserInfo(context.Context, *UserIdRequest, *UserInfoResponse) error
	//修改信息
	UpdateUserInfo(context.Context, *UserInfoRequest, *Response) error
	//发送注册邮件
	SendRegisterMail(context.Context, *SendMailRequest, *SendMailResponse) error
	//发送重置密码邮件
	SendResetPwdMail(context.Context, *SendMailRequest, *SendMailResponse) error
	//重置密码
	ResetPwd(context.Context, *ResetPwdRequest, *Response) error
	//获取权限
	GetUserPermission(context.Context, *UserIdRequest, *GetPermissionResponse) error
	//修改权限
	UpdateUserPermission(context.Context, *UpdatePermissionRequest, *Response) error
	//退出账号
	Logout(context.Context, *UserIdRequest, *Response) error
	//删除账号
	DelUser(context.Context, *UserIdRequest, *Response) error
	//禁用账号
	DisableUser(context.Context, *UserIdRequest, *Response) error
	//启用账号
	EnableUser(context.Context, *UserIdRequest, *Response) error
}

func RegisterAccountHandler(s server.Server, hdlr AccountHandler, opts ...server.HandlerOption) error {
	type account interface {
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		GetUserInfo(ctx context.Context, in *UserIdRequest, out *UserInfoResponse) error
		UpdateUserInfo(ctx context.Context, in *UserInfoRequest, out *Response) error
		SendRegisterMail(ctx context.Context, in *SendMailRequest, out *SendMailResponse) error
		SendResetPwdMail(ctx context.Context, in *SendMailRequest, out *SendMailResponse) error
		ResetPwd(ctx context.Context, in *ResetPwdRequest, out *Response) error
		GetUserPermission(ctx context.Context, in *UserIdRequest, out *GetPermissionResponse) error
		UpdateUserPermission(ctx context.Context, in *UpdatePermissionRequest, out *Response) error
		Logout(ctx context.Context, in *UserIdRequest, out *Response) error
		DelUser(ctx context.Context, in *UserIdRequest, out *Response) error
		DisableUser(ctx context.Context, in *UserIdRequest, out *Response) error
		EnableUser(ctx context.Context, in *UserIdRequest, out *Response) error
	}
	type Account struct {
		account
	}
	h := &accountHandler{hdlr}
	return s.Handle(s.NewHandler(&Account{h}, opts...))
}

type accountHandler struct {
	AccountHandler
}

func (h *accountHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AccountHandler.Login(ctx, in, out)
}

func (h *accountHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.AccountHandler.Register(ctx, in, out)
}

func (h *accountHandler) GetUserInfo(ctx context.Context, in *UserIdRequest, out *UserInfoResponse) error {
	return h.AccountHandler.GetUserInfo(ctx, in, out)
}

func (h *accountHandler) UpdateUserInfo(ctx context.Context, in *UserInfoRequest, out *Response) error {
	return h.AccountHandler.UpdateUserInfo(ctx, in, out)
}

func (h *accountHandler) SendRegisterMail(ctx context.Context, in *SendMailRequest, out *SendMailResponse) error {
	return h.AccountHandler.SendRegisterMail(ctx, in, out)
}

func (h *accountHandler) SendResetPwdMail(ctx context.Context, in *SendMailRequest, out *SendMailResponse) error {
	return h.AccountHandler.SendResetPwdMail(ctx, in, out)
}

func (h *accountHandler) ResetPwd(ctx context.Context, in *ResetPwdRequest, out *Response) error {
	return h.AccountHandler.ResetPwd(ctx, in, out)
}

func (h *accountHandler) GetUserPermission(ctx context.Context, in *UserIdRequest, out *GetPermissionResponse) error {
	return h.AccountHandler.GetUserPermission(ctx, in, out)
}

func (h *accountHandler) UpdateUserPermission(ctx context.Context, in *UpdatePermissionRequest, out *Response) error {
	return h.AccountHandler.UpdateUserPermission(ctx, in, out)
}

func (h *accountHandler) Logout(ctx context.Context, in *UserIdRequest, out *Response) error {
	return h.AccountHandler.Logout(ctx, in, out)
}

func (h *accountHandler) DelUser(ctx context.Context, in *UserIdRequest, out *Response) error {
	return h.AccountHandler.DelUser(ctx, in, out)
}

func (h *accountHandler) DisableUser(ctx context.Context, in *UserIdRequest, out *Response) error {
	return h.AccountHandler.DisableUser(ctx, in, out)
}

func (h *accountHandler) EnableUser(ctx context.Context, in *UserIdRequest, out *Response) error {
	return h.AccountHandler.EnableUser(ctx, in, out)
}
